apply from: 'dependencies.gradle'
apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'maven'
apply plugin: 'signing'

sourceCompatibility=1.8
targetCompatibility=1.8

repositories
{
    mavenCentral()
}

dependencies
{
    compile packages.slf4j.api
    compile packages.slf4j.log4j12
    compile packages.log4j
    
    compile packages.jts

    testCompile packages.junit
}

/**
 * Test related items
 */
checkstyle
{
    toolVersion = versions.checkstyle
}

sourceSets
{
    integrationTest
    {
        java
        {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }
}

test
{
    testLogging
    {
        events "passed", "skipped", "failed"
    }
}

configurations
{
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    testLogging
    {
        events "passed", "skipped", "failed"
    }
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

/**
 * Artifact related items
 */
task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts
{
    archives javadocJar, sourcesJar
}

/**
 * Deployment related items
 */
import org.gradle.plugins.signing.Sign

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        allprojects { ext."signing.keyId" = System.getenv('GPG_KEY_ID') }
        allprojects { ext."signing.secretKeyRingFile" = System.getenv('GPG_KEY_LOCATION') }
        allprojects { ext."signing.password" = System.getenv('GPG_PASSPHRASE') }
    }
    // Do not sign archives by default (a local build without gpg keyring should succeed)
    if (taskGraph.allTasks.any { it.name == 'build' }) {
        tasks.findAll { it.name == 'signArchives' || it.name == 'signDocsJar' || it.name == 'signTestJar' }.each { task ->
            task.enabled = false
        }
    }
}

signing
{
    sign configurations.archives
}
build.dependsOn.remove(signArchives)

uploadArchives
{
    repositories
    {
        mavenDeployer
        {
            beforeDeployment
            {
                MavenDeployment deployment -> signing.signPom(deployment)
            }

            repository(url: maven2_url) {
                authentication(userName: System.getenv('SONATYPE_USERNAME'), password: System.getenv('SONATYPE_PASSWORD'))
            }

            snapshotRepository(url: snapshot_url) {
                authentication(userName: System.getenv('SONATYPE_USERNAME'), password: System.getenv('SONATYPE_PASSWORD'))
            }

            pom.project
            {
                name project_name
                packaging 'jar'
                // optionally artifactId can be defined here
                description project_description
                url project_url

                scm {
                    connection project_scm
                    developerConnection project_scm
                    url project_url
                }

                licenses {
                    license {
                        name project_license_slug
                        url project_license_url
                    }
                }

                developers {
                    developer {
                        id project_developer
                        name project_developer
                    }
                }
            }
        }
    }
}

